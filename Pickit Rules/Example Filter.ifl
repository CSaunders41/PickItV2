//----------------------------------------------
// Main Currency
//----------------------------------------------
//BaseName == "Armourer's Scrap"

//BaseName == "Awakened Sextant"

//BaseName == "Blacksmith's Whetstone"

//BaseName == "Blessed Orb"

//BaseName == "Cartographer's Chisel"

//BaseName == "Chaos Orb"

//BaseName == "Chromatic Orb"

//BaseName == "Divine Orb"

//BaseName == "Enkindling Orb"

//BaseName == "Exalted Orb"

//BaseName == "Gemcutter's Prism"

//BaseName == "Glassblower's Bauble"

//BaseName == "Instilling Orb"

//BaseName == "Jeweller's Orb"

//BaseName == "Lesser Eldritch Ember"

//BaseName == "Lesser Eldritch Ichor"

//BaseName == "Mirror of Kalandra"

//BaseName == "Orb of Alchemy"

//BaseName == "Orb of Alteration"

//BaseName == "Orb of Annulment"

//BaseName == "Orb of Augmentation"

//BaseName == "Orb of Binding"

//BaseName == "Orb of Chance"

//BaseName == "Orb of Fusing"

//BaseName == "Orb of Horizons"

//BaseName == "Orb of Regret"

//BaseName == "Orb of Scouring"

//BaseName == "Orb of Transmutation"

//BaseName == "Orb of Unmaking"

//BaseName == "Portal Scroll"

//BaseName == "Regal Orb"

//BaseName == "Rogue's Marker"

//BaseName == "Sacred Orb"

//BaseName == "Scroll of Wisdom"

//BaseName == "Stacked Deck"

//BaseName == "Surveyor's Compass"

//BaseName == "Vaal Orb"

//BaseName == "Veiled Chaos Orb"

//----------------------------------------------
// Currency Shards
//----------------------------------------------
//BaseName == "Alchemy Shard"

//BaseName == "Alteration Shard"

//BaseName == "Ancient Shard"

//BaseName == "Annulment Shard"

//BaseName == "Binding Shard"

//BaseName == "Chaos Shard"

//BaseName == "Engineer's Shard"

//BaseName == "Exalted Shard"

//BaseName == "Fracturing Shard"

//BaseName == "Harbinger's Shard"

//BaseName == "Horizon Shard"

//BaseName == "Mirror Shard"

//BaseName == "Regal Shard"

//BaseName == "Scroll Fragment"

//BaseName == "Transmutation Shard"

//BaseName == "Awakener's Orb"

//----------------------------------------------
// Exotic Currency
//----------------------------------------------
//BaseName == "Crescent Splinter"

//BaseName == "Crusader's Exalted Orb"

//BaseName == "Eldritch Chaos Orb"

//BaseName == "Eldritch Exalted Orb"

//BaseName == "Eldritch Orb of Annulment"

//BaseName == "Elevated Sextant"

//BaseName == "Exceptional Eldritch Ember"

//BaseName == "Exceptional Eldritch Ichor"

//BaseName == "Grand Eldritch Ember"

//BaseName == "Grand Eldritch Ichor"

//BaseName == "Greater Eldritch Ember"

//BaseName == "Greater Eldritch Ichor"

//BaseName == "Hunter's Exalted Orb"

//BaseName == "Orb of Conflict"

//BaseName == "Orb of Dominance"

//BaseName == "Redeemer's Exalted Orb"

//BaseName == "Warlord's Exalted Orb"

//----------------------------------------------
// All Currency
//----------------------------------------------
ClassName.EndsWith("Currency")

//----------------------------------------------
// Veiled Section
//----------------------------------------------
VeiledModCount > 0

//----------------------------------------------
// Influenced Section / Fractured
//----------------------------------------------
IsElder

IsShaper

IsHunter

IsWarlord

IsCrusader

IsRedeemer

//IsInfluenced

//IsFractured

//----------------------------------------------
// Chaos Recipe
//----------------------------------------------
!IsIdentified && Rarity == ItemRarity.Rare && ItemLevel <= 74 && ItemLevel >= 60 && ClassName == "Ring"

!IsIdentified && Rarity == ItemRarity.Rare && ItemLevel <= 74 && ItemLevel >= 60 && ClassName == "Amulet"

!IsIdentified && Rarity == ItemRarity.Rare && ItemLevel <= 74 && ItemLevel >= 60 && ClassName == "Belt"

!IsIdentified && Rarity == ItemRarity.Rare && ItemLevel <= 74 && ItemLevel >= 60 && ClassName == "Gloves"

!IsIdentified && Rarity == ItemRarity.Rare && ItemLevel <= 74 && ItemLevel >= 60 && ClassName == "Boots"

!IsIdentified && Rarity == ItemRarity.Rare && ItemLevel <= 74 && ItemLevel >= 60 && ClassName == "Helmet"

!IsIdentified && Rarity == ItemRarity.Rare && ItemLevel <= 74 && ItemLevel >= 60 && ClassName == "Body Armour"

!IsIdentified && Rarity == ItemRarity.Rare && ItemLevel <= 74 && ItemLevel >= 60 && IsWeapon

//----------------------------------------------
// Regal Recipe non influenced
//----------------------------------------------
!IsInfluenced && !IsIdentified && Rarity == ItemRarity.Rare && ItemLevel >= 75 && ClassName == "Ring"

!IsInfluenced && !IsIdentified && Rarity == ItemRarity.Rare && ItemLevel >= 75 && ClassName == "Amulet"

!IsInfluenced && !IsIdentified && Rarity == ItemRarity.Rare && ItemLevel >= 75 && ClassName == "Belt"

!IsInfluenced && !IsIdentified && Rarity == ItemRarity.Rare && ItemLevel >= 75 && ClassName == "Gloves"

!IsInfluenced && !IsIdentified && Rarity == ItemRarity.Rare && ItemLevel >= 75 && ClassName == "Boots"

!IsInfluenced && !IsIdentified && Rarity == ItemRarity.Rare && ItemLevel >= 75 && ClassName == "Helmet"

!IsInfluenced && !IsIdentified && Rarity == ItemRarity.Rare && ItemLevel >= 75 && ClassName == "Body Armour"

!IsInfluenced && !IsIdentified && Rarity == ItemRarity.Rare && ItemLevel >= 75 && IsWeapon

//----------------------------------------------
// 6 Socket + 6 Links
//----------------------------------------------
SocketInfo.SocketNumber == 6

SocketInfo.LargestLinkSize == 6

//----------------------------------------------
// Divination Cards
//----------------------------------------------
ClassName == "DivinationCard"

//----------------------------------------------
// Maps + Map Fragments
//----------------------------------------------
isMap && MapTier >= 1

isMap && Rarity == ItemRarity.Unique

ClassName == "MapFragment"

//----------------------------------------------
// General Core + Mecahnic pickups
//----------------------------------------------
HasMods(new string[] { "MetamorphosisItemisedBossRewards" }) // Metamorph Organ

BaseName == "Treasure Key" && 
BaseName == "Golden Key" &&
BaseName == "Silver Key" // Lab

BaseName == "Stone of Passage" // Incursion

ClassName == "HeistObjective" || 
ClassName == "HeistContract" // Heist items

ClassName == "ItemisedSanctum" // Sanctum items, need to check if this is all or not

//----------------------------------------------
// Quest Items
//----------------------------------------------
ClassName == "QuestItem"

//----------------------------------------------
// Skill Gems
//----------------------------------------------
ClassName.Contains("Skill Gem") && ItemQuality >= 1 // quality gem

ClassName.Contains("Skill Gem") && GemInfo.Level >= 20 // level 20+

//ClassName.Contains("Skill Gem") && ItemQuality == 0 // non quality gem

//----------------------------------------------
// Flasks
//----------------------------------------------
ClassName.Contains("Flask") && ItemQuality >= 20 // quality flask over 20

//ClassName.Contains("Flask") && ItemQuality == 0 // non quality flask

//----------------------------------------------
// Uniques
//----------------------------------------------
Rarity == ItemRarity.Unique // all uniques

//----------------------------------------------
// Incubatores
//----------------------------------------------
BaseName == "Kalguuran Incubator"

BaseName == "Diviner's Incubator"

BaseName == "Geomancer's Incubator"

BaseName == "Infused Incubator"

BaseName == "Skittering Incubator"

BaseName == "Foreboding Incubator"

BaseName == "Blighted Incubator"

BaseName.EndsWith(" Incubator") // All Incubators

//----------------------------------------------
// Others
//----------------------------------------------
GemInfo != null 
&& (GemInfo.QualityType == SkillGemQualityTypeE.Anomalous 
|| GemInfo.QualityType == SkillGemQualityTypeE.Phantasmal 
|| GemInfo.QualityType == SkillGemQualityTypeE.Divergent) // Alt quality gems

ModsInfo.ItemMods.Any( 
$.Name.ToLower().Contains("CriticalMultiplier".ToLower())
&& $.Values != null
&& $.Values.Count >= 0
&& $.Values[0] > 30) // crit multi over 30

//SocketInfo != null && (HasUnorderedSocketGroup("RGB") || HasUnorderedSocketGroup("RGG") || HasUnorderedSocketGroup("RB")) // link atleast has RGB or RGG or RB

//FindModds("fireresist").Any(Values[0] >= 20) && FindMods("coldresist").Any(Values[0] >= 20)

//SocketInfo.SocketNumber == 4 && HasUnorderedSocketGroup("rb") // 4 sockets with a link that has 2 reds and a blue

//MatchModsSum(new string[] { "FireResist", "ColdResist", "LightningResist" })[0] > 75 // Look for all these mods (null if not all found) with a total sum above value

//AnyModsSum(new string[] { "FireResist", "ColdResist", "LightningResist" })[0] > 30 // look for any of these mods that produce a sum above value

//HasMods(new string[] { "FireResist" }) // check if item has mod list

//MatchModsWeightedSum(new (string, int)[] { ("FireResist", 2), ("LightningResist", 2) })[0] >= 89